* Copyright 2023 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt
* 2023-07-09
* https://github.com/Aleksandr3Bocharov/TaskEinshtein

/*

Задача Эйнштейна

Программа "TaskEinshtein" написана на языке программирования Рефал-5λ.
https://github.com/bmstu-iu9/refal-5-lambda

Решение задачи Эйнштейна на Рефал-5λ.

Задача Эйнштейна.

Условия:
1. Есть 5 домов разных цветов.
2. В каждом доме живет по одному человеку отличающегося от другого по национальности.
3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.
4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.

Вопрос: Чья рыба?

Подсказки:
1.  Англичанин живет в красном доме.
2.  У шведа есть собака.
3.  Датчанин пьет чай.
4.  Зеленый дом стоит слева от белого.
5.  Обитатель зеленого дома пьет кофе.
6.  Человек, который курит Pall Mall, держит птицу.
7.  Обитатель среднего дома пьет молоко.
8.  Обитатель желтого дома курит Dunhill.
9.  Норвежец живет в первом доме.
10. Курильщик Marlboro живет возле того, у кого есть кошка.
11. Человек, у которого есть конь, живет возле того, кто курит Dunhill.
12. Курильщик Winfield пьет пиво.
13. Норвежец живет возле голубого дома.
14. Немец курит Rothmans.
15. Курильщик Marlboro живет по соседству с человеком, который пьет воду.

*/

*$FROM LibraryEx;
$EXTERN Map, Inc, Trim, Min;

/*

<RU e.String> == e.String

e.String ::= s.CHAR*

*/
RU {
    =
      ;
    'Ё' e.RestChars =
      <Chr 240> <RU e.RestChars>;
    'ё' e.RestChars =
      <Chr 241> <RU e.RestChars>;
    s.Char1 s.Char2 e.RestChars,
    <isRU s.Char1 s.Char2>:208 =
      <Chr <Sub <Ord s.Char2> 16>> <RU e.RestChars>;
    s.Char1 s.Char2 e.RestChars,
    <isRU s.Char1 s.Char2>:209 =
      <Chr <Add <Ord s.Char2> 96>> <RU e.RestChars>;
    s.Char e.RestChars =
      s.Char <RU e.RestChars>;
  }
  
  /*
  
  <isRU e.Char> == s.isRU
  
  e.Char ::= s.CHAR s.CHAR
  s.isRU ::= 208 | 209 | False
  
  */
  isRU {
    e.Char,
    <Compare (<Ord e.Char>) 208 143>: '+',
    <Compare (<Ord e.Char>) 208 192>: '-' =
      208;
    e.Char,
    <Compare (<Ord e.Char>) 209 127>: '+',
    <Compare (<Ord e.Char>) 209 144>: '-' =
      209;
    e.Char =
      False
  }

* Вывод справки
Help {
  = <Prout
      <RU
        '\nРешение задачи Эйнштейна на Рефал-5 Лямбда.\n\n'
        'Задача Эйнштейна.\n\n'
        'Условия:\n'
        '1. Есть 5 домов разных цветов.\n'
        '2. В каждом доме живет по одному человеку отличающегося от другого по национальности.\n'
        '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
        '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.\n\n'
        'Вопрос: Чья рыба?\n\n'
        'Подсказки:\n'
        '1.  Англичанин живет в красном доме.\n'
        '2.  У шведа есть собака.\n'
        '3.  Датчанин пьет чай.\n'
        '4.  Зеленый дом стоит слева от белого.\n'
        '5.  Обитатель зеленого дома пьет кофе.\n'
        '6.  Человек, который курит Pall Mall, держит птицу.\n'
        '7.  Обитатель среднего дома пьет молоко.\n'
        '8.  Обитатель желтого дома курит Dunhill.\n'
        '9.  Норвежец живет в первом доме.\n'
        '10. Курильщик Marlboro живет возле того, у кого есть кошка.\n'
        '11. Человек, у которого есть конь, живет возле того, кто курит Dunhill.\n'
        '12. Курильщик Winfield пьет пиво.\n'
        '13. Норвежец живет возле голубого дома.\n'
        '14. Немец курит Rothmans.\n'
        '15. Курильщик Marlboro живет по соседству с человеком, который пьет воду.\n\n\n'
      >
    >
}

/*

<Rule s.Rule> == e.Rule

s.Rule ::= s.Number
e.Rule ::= s.Predicate (s.Category s.Object) (s.Category s.Object) | Fish
s.Predicate ::= Member | Nextto  | Near
s.Category ::= Color | Nationality | Cigarettes | Animal | Drink 
s.Object ::= s.Color | s.Nationality | s.Cigarretes | s.Animal | s.Drink
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer

*/
Rule {
  /* 1. Англичанин живет в красном доме. */
  1 =
    Member (Color Red) (Nationality Englishman);
  /* 2. У шведа есть собака. */
  2 =
    Member (Nationality Shwed) (Animal Dog);
  /* 3. Датчанин пьет чай. */
  3 =
    Member (Nationality Danish) (Drink Tea);
  /* 4. Зеленый дом стоит слева от белого. */
  4 =
    Nextto (Color Green) (Color White);
  /* 5. Обитатель зеленого дома пьет кофе. */
  5 =
    Member (Color Green) (Drink Coffee);
  /* 6. Человек, который курит Pall Mall, держит птицу. */
  6 =
    Member (Cigarettes PallMall) (Animal Bird);
  /* 7. Обитатель среднего дома пьет молоко. */
  7 =
    Member (Home 3) (Drink Milk);
  /* 8. Обитатель желтого дома курит Dunhill. */
  8 =
    Member (Color Yellow) (Cigarettes Dunhill);
  /* 9. Норвежец живет в первом доме. */
  9 =
    Member (Home 1) (Nationality Norwegian);
  /* 10. Курильщик Marlboro живет возле того, у кого есть кошка. */
  10 =
    Near (Cigarettes Marlboro) (Animal Cat);
  /* 11. Человек, у которого есть конь, живет возле того, кто курит Dunhill. */
  11 =
    Near (Animal Horse) (Cigarettes Dunhill);
  /* 12. Курильщик Winfield пьет пиво. */
  12 =
    Member (Cigarettes Winfield) (Drink Beer);
  /* 13. Норвежец живет возле голубого дома. */
  13 =
    Near (Nationality Norwegian) (Color Blue);
  /* 14. Немец курит Rothmans. */
  14 =
    Member (Nationality German) (Cigarettes Rothmans);
  /* 15. Курильщик Marlboro живет по соседству с человеком, который пьет воду. */
  15 =
    Near (Cigarettes Marlboro) (Drink Water);
  /* 16. Рыба - пятое животное. */
  16 =
    Fish    
}

/*

<Solve e.Solve> == e.Solve

e.Solve ::= (s.Rule (e.Rules) e.Tables '=' e.exTable)+

e.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.exTable ::= e.Table | Impossible
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
Solve {
  /* Возврат к предыдущему правилу */
  e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' e.Table) (s.Rule (e.Tables) '=' Impossible) =
    <Rp "StepsBack" '=' <Inc <Cp "StepsBack">>>
    <Solve e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' Impossible)>;
  /* Переход к следующему применению правила */
  e.Solve-B (s.Rule (e.Rules) (e.Table) e.RestTables '=' Impossible) =
    <Rp "Steps" '=' <Inc <Cp "Steps">>>
    <Rp "StepsBack" '=' <Inc <Cp "StepsBack">>>
    <Solve e.Solve-B (s.Rule (e.Rules) e.RestTables '=' e.Table)>;
  /* Решение найдено */
  e.Solve-B (s.Rule () e.Tables '=' e.Table) =
    <Rp "Steps" '=' <Inc <Cp "Steps">>>
    <Rp "StepsBack" '=' <Inc <Cp "StepsBack">>>
    e.Solve-B (s.Rule () e.Tables '=' e.Table) (16 () '=' <ApplyRule <Rule 16> e.Table>);  
  /* Переход к следующему правилу */  
  e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table),
  <FindMinRule (e.Rules) e.Table>: s.MinRule,
  e.Rules: e.Rules-B s.MinRule e.Rules-E,
  <Br "RuleTables" '='>
  <ApplyRule <Rule s.MinRule> e.Table>
  <Dg "RuleTables">: 
  {
    (e.NewTable) e.RestNewTables =
      <Rp "Steps" '=' <Inc <Cp "Steps">>>
      <Rp "StepsBack" '=' <Inc <Cp "StepsBack">>>
      <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table) (s.MinRule (e.Rules-B e.Rules-E) e.RestNewTables '=' e.NewTable)>;
    =
      <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' Impossible)>
  }      
}

/*

<FindMinRule (e.Rules) e.Table> == s.Rule

e.Rules ::= s.Rule+
s.Rule ::= s.NUMBER
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
FindMinRule {
  (s.Rule) e.Table =
    s.Rule;
  (s.Rule e.RestRules) e.Table,
  <Br "RuleTables" '='>
  <ApplyRule <Rule s.Rule> e.Table>
  <Lenw <Dg "RuleTables">>: s.Min e.Tables =
    <FindMinRule-Aux s.Min s.Rule (e.RestRules) e.Table>
}

FindMinRule-Aux {
  0 s.MinRule (e.Rules) e.Table =
    s.MinRule;
  s.Min s.MinRule () e.Table =
    s.MinRule;
  s.Min s.MinRule (s.Rule e.RestRules) e.Table,
  <Br "RuleTables" '='>
  <ApplyRule <Rule s.Rule> e.Table>
  <Lenw <Dg "RuleTables">>: s.Len e.Tables,
  <Min (s.Min s.MinRule) (s.Len s.Rule)>: (s.NewMin s.NewMinRule) =
    <FindMinRule-Aux s.NewMin s.NewMinRule (e.RestRules) e.Table>
}

/*

<ApplyRule e.Rule e.Table> ==

e.Rule ::= s.Predicate (s.Category s.Object) (s.Category s.Object) | Fish
s.Predicate ::= Member | Nextto  | Near
s.Category ::= Color | Nationality | Cigarettes | Animal | Drink 
s.Object ::= s.Color | s.Nationality | s.Cigarretes | s.Animal | s.Drink
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= s.Color | '???'
e.Nationality ::= s.Nationality | '???'
e.Cigarettes ::= s.Cigarettes | '???'
e.Animal ::= s.Animal | '???'
e.Drink ::= s.Drink | '???'

*/
ApplyRule {
  /* Member - 2 объекта в одном доме */
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E =
    <Rp "RuleTables" '=' (e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E)>;   
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table,
  <Exist (s.Category1 s.Object1) e.Table>: True,
  <Exist (s.Category2 s.Object2) e.Table>: True =
    ; 
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 '???') e.Home-E) e.Table-E =
    <Rp "RuleTables" '=' (e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E)>;  
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 s.OtherObject2) e.Home-E) e.Table-E =
    ;    
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 '???') e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E =
    <Rp "RuleTables" '=' (e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E)>;
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 s.OtherObject1) e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E =
    ;  
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 '???') e.Home-M (s.Category2 '???') e.Home-E) e.Table-E,
  <Rp "RuleTables" '='
    <Cp "RuleTables">
    (e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-M (s.Category2 s.Object2) e.Home-E) e.Table-E)
  >: False =
    ;
  Member (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table =
    ;
  /* Nextto - 1 объект в доме слева дома 2 объекта */
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E =
    <Rp "RuleTables" '=' (e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E)>;   
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table,
  <Exist (s.Category1 s.Object1) e.Table>: True,
  <Exist (s.Category2 s.Object2) e.Table>: True =
    ; 
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.HomeL-B (s.Category1 '???') e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E =
    <Rp "RuleTables" '=' (e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E)>;  
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.HomeL-B (s.Category1 s.OtherObject1) e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E =
    ;
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  (e.Home-B (s.Category2 s.Object2) e.Home-E) e.Table-E =
    ;      
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 '???') e.HomeR-E) e.Table-E =
    <Rp "RuleTables" '=' (e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E)>;
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 s.OtherObject2) e.HomeR-E) e.Table-E =
    ;
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.Home-B (s.Category1 s.Object1) e.Home-E) =
    ;  
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table-B (e.HomeL-B (s.Category1 '???') e.HomeL-E) (e.HomeR-B (s.Category2 '???') e.HomeR-E) e.Table-E,
  <Rp "RuleTables" '=' <Cp "RuleTables"> (e.Table-B (e.HomeL-B (s.Category1 s.Object1) e.HomeL-E) (e.HomeR-B (s.Category2 s.Object2) e.HomeR-E) e.Table-E)>: False =
    ;
  Nextto (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table =
    ;
  /* Near - 2 объекта в соседних домах */
  Near (s.Category1 s.Object1) (s.Category2 s.Object2)
  e.Table =
    <ApplyRule Nextto (s.Category1 s.Object1) (s.Category2 s.Object2) e.Table>
    <Br "RuleTables"Temp '=' <Cp "RuleTables">>
    <Rp "RuleTables" '='>
    <ApplyRule Nextto (s.Category2 s.Object2) (s.Category1 s.Object1) e.Table>
    <Rp "RuleTables" '=' <Dg "RuleTables"Temp> <Cp "RuleTables">>;
  /* Fish - рыба - пятое животное */
  Fish
  e.Table-B (e.Home-B (Animal '???') e.Home-E) e.Table-E =
    e.Table-B (e.Home-B (Animal Fish) e.Home-E) e.Table-E
}

/*

<Exist t.Object e.Table> == True | False

t.Object ::= (Color s.Color) | (Nationality s.Nationality) | (Cigarettes s.Cigarettes) | (Animal s.Animal) | (Drink s.Drink) 
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= s.Color | '???'
s.Color ::= Yellow | Blue | Red | Green | White
e.Nationality ::= s.Nationality | '???'
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
e.Cigarettes ::= s.Cigarettes | '???'
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
e.Animal ::= s.Animal | '???'
s.Animal ::= Cat | Horse | Bird | Fish | Dog
e.Drink ::= s.Drink | '???'
s.Drink ::= Water | Tea | Milk | Coffee | Beer

*/
Exist {
  t.Object e.Table-B (e.Home-B t.Object e.Home-E) e.Table-E =
    True;
  t.Object e.Table =
    False  
}

/*

<Answer e.Table> == e.Object

e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color s.Color) (Nationality s.Nationality) (Cigarettes s.Cigarettes) (Animal s.Animal) (Drink s.Drink)
e.Home2 ::= (Home 2) (Color s.Color) (Nationality s.Nationality) (Cigarettes s.Cigarettes) (Animal s.Animal) (Drink s.Drink)
e.Home3 ::= (Home 3) (Color s.Color) (Nationality s.Nationality) (Cigarettes s.Cigarettes) (Animal s.Animal) (Drink s.Drink)
e.Home4 ::= (Home 4) (Color s.Color) (Nationality s.Nationality) (Cigarettes s.Cigarettes) (Animal s.Animal) (Drink s.Drink)
e.Home5 ::= (Home 5) (Color s.Color) (Nationality s.Nationality) (Cigarettes s.Cigarettes) (Animal s.Animal) (Drink s.Drink)
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed 
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield 
s.Animal ::= Cat | Horse | Bird | Fish | Dog 
s.Drink ::= Water | Tea | Milk | Coffee | Beer 
e.Object ::= 'Норвежец'  | 'Датчанин'  |  'Англичанин' | 'Немец' | 'Швед'

*/
Answer {
  e.Table-B (e.Home-B (Nationality s.Nationality) e.Home-M (Animal Fish) e.Home-E) e.Table-E = 
    <Trim <Format s.Nationality>>
}    

/*

<DoMapPrintSolve e.RuleSolve> ==

e.RuleSolve ::= (s.Rule (e.Rules) e.Tables '=' e.Table)

s.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/

DoMapPrintSolve {
  (s.Rule (e.Rules) e.Tables '=' e.Table) =
    <PrintRule s.Rule>
    <PrintTable e.Table>
}

/*

<PrintTable e.Table> ==

e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
PrintTable {
  e.Table =
    <Prout <RU 'Дом '  'Цвет           ' 'Национальность ' 'Сигареты       ' 'Животное       ' 'Напиток'>>
    <Map DoMapPrintTable e.Table>
    <Prout>
}

DoMapPrintTable {
  (
    (Home s.Home) (Color e.Color) (Nationality e.Nationality)
    (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
  ) =
    <Prout s.Home '  ' <RU <Format e.Color> <Format e.Nationality> <Format e.Cigarettes> <Format e.Animal> <Format e.Drink>>>
}

/*

<Format e.Object> == e.Format

e.Object ::= s.Color | s.Nationality | s.Cigarretes | s.Animal | s.Drink | '???'
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer
e.Format ::= 'Жёлтый         ' | 'Голубой        ' | 'Красный        ' | 'Зелёный        ' | 'Белый          ' |
  | 'Норвежец       ' | 'Датчанин       '  |  'Англичанин     ' | 'Немец          ' | 'Швед           '  |
  | 'Dunhill        ' | 'Rothmans       '  |  'Pall Mall      ' | 'Marlboro       ' | 'Winfield       '  |
  | 'Кошка          ' | 'Конь           '  |  'Птица          ' | 'Рыба           ' | 'Собака         '  |
  | 'Вода' | 'Чай'  |  'Молоко' | 'Кофе' | 'Пиво' | '???            '

*/
Format {
  Yellow =
    'Жёлтый         ';
  Blue =
    'Голубой        ';
  Red =
    'Красный        ';
  Green =
    'Зелёный        ';
  White =
    'Белый          ';     
  Norwegian =
    'Норвежец       '; 
  Danish =
    'Датчанин       ';  
  Englishman =
    'Англичанин     ';
  German =
    'Немец          '; 
  Shwed =
    'Швед           ';   
  Dunhill =
    'Dunhill        ';
  Rothmans =
    'Rothmans       ';
  PallMall =
    'Pall Mall      ';
  Marlboro =
    'Marlboro       '; 
  Winfield =
    'Winfield       ';  
  Cat =
    'Кошка          ';    
  Horse =
    'Конь           ';
  Bird =
    'Птица          '; 
  Fish =
    'Рыба           ';
  Dog =
    'Собака         ';
  Water =
    'Вода';  
  Tea =
    'Чай';
  Milk =
    'Молоко'; 
  Coffee =
    'Кофе';
  Beer =
    'Пиво';
  '???' =
    '???            '  
}

/*

<PrintRule s.Rule> ==

s.Rule ::= s.NUMBER

*/
PrintRule {
  s.Rule =
    <Prout <RU 'Подсказка '> s.Rule>
    <Prout <RU <RuleText s.Rule>> '\n'>
}

/*

<RuleText s.Rule> == e.RuleText

s.Rule ::= s.NUMBER
e.RuleText ::= 'Англичанин живет в красном доме.' | 'У шведа есть собака.' |
  | 'Датчанин пьет чай.' | 'Зеленый дом стоит слева от белого.' | 'Обитатель зеленого дома пьет кофе.' |
  | 'Человек, который курит Pall Mall, держит птицу.' | 'Обитатель среднего дома пьет молоко.' |
  | 'Норвежец живет в первом доме.' | 'Курильщик Marlboro живет возле того, у кого есть кошка.' |
  | 'Человек, у которого есть конь, живет возле того, кто курит Dunhill.' | 'Курильщик Winfield пьет пиво.' |
  | 'Норвежец живет возле голубого дома.' | 'Немец курит Rothmans.' | 
  | 'Курильщик Marlboro живет по соседству с человеком, который пьет воду.' | 
  | 'Условия:\n'
    '1. Есть 5 домов разных цветов.\n'
    '2. В каждом доме живет по одному человеку отличающегося от другого по национальности.\n'
    '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
    '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.' |
  | 'Рыба - пятое животное.'

*/
RuleText {
  0 = 
    'Условия:\n'
    '1. Есть 5 домов разных цветов.\n'
    '2. В каждом доме живет по одному человеку отличающегося от другого по национальности.\n'
    '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
    '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.';
  1 =
    'Англичанин живет в красном доме.';
  2 =
    'У шведа есть собака.';
  3 =
    'Датчанин пьет чай.';
  4 =
    'Зеленый дом стоит слева от белого.';
  5 =
    'Обитатель зеленого дома пьет кофе.';
  6 =
    'Человек, который курит Pall Mall, держит птицу.';
  7 =
    'Обитатель среднего дома пьет молоко.';
  8 =
    'Обитатель желтого дома курит Dunhill.';
  9 =
    'Норвежец живет в первом доме.';
  10 =
    'Курильщик Marlboro живет возле того, у кого есть кошка.';
  11 =
    'Человек, у которого есть конь, живет возле того, кто курит Dunhill.';
  12 =
    'Курильщик Winfield пьет пиво.';
  13 =
    'Норвежец живет возле голубого дома.';
  14 =
    'Немец курит Rothmans.';
  15 =
    'Курильщик Marlboro живет по соседству с человеком, который пьет воду.';
  16 = 
    'Рыба - пятое животное.'
}

$ENTRY Go {
  , 
  <Help>
  <Br "Steps" '=' 0>
  <Br "StepsBack" '=' 0>
  <Solve    
    (0 (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) '='
      ((Home 1) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 2) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 3) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 4) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 5) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
    )
  >: e.Solve-B (16 () '=' e.Table) =
    <Prout <RU 'Вопрос: Чья рыба?\nОтвет: '> <RU <Answer e.Table>> <RU ' держит рыбу.\n'>>
    <Map DoMapPrintSolve e.Solve-B (16 () '=' e.Table)>
    <Prout <RU 'Количество шагов без возвратов: '> <Dg "Steps">>
    <Prout <RU 'Количество шагов с возвратами: '> <Dg "StepsBack">>
}