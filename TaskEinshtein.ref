* Copyright 2023 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt
* 2023-07-26
* https://github.com/Aleksandr3Bocharov/TaskEinshtein

/*

Задача Эйнштейна

Программа "TaskEinshtein" написана на языке программирования Рефал-05.
https://github.com/Mazdaywik/Refal-05

Программа "TaskEinshtein" использует библиотеку GTK3.
https://docs.gtk.org/gtk3/

Решение задачи Эйнштейна на Рефал-05.

Задача Эйнштейна.

Условия:
1. Есть 5 домов разных цветов.
2. В каждом доме живет по одному человеку, отличающегося от другого по национальности.
3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.
4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.

Вопрос: Чья рыба?

Подсказки:
1.  Англичанин живет в красном доме.
2.  У шведа есть собака.
3.  Датчанин пьет чай.
4.  Зеленый дом стоит слева от белого.
5.  Обитатель зеленого дома пьет кофе.
6.  Человек, который курит Pall Mall, держит птицу.
7.  Обитатель среднего дома пьет молоко.
8.  Обитатель желтого дома курит Dunhill.
9.  Норвежец живет в первом доме.
10. Курильщик Marlboro живет возле того, у кого есть кошка.
11. Человек, у которого есть конь, живет возле того, кто курит Dunhill.
12. Курильщик Winfield пьет пиво.
13. Норвежец живет возле голубого дома.
14. Немец курит Rothmans.
15. Курильщик Marlboro живет по соседству с человеком, который пьет воду.

*/

*$FROM LibraryEx
$EXTERN Map, Inc;

*$FROM taskeinshteinc
$EXTERN GTKInit, MessageBox, TreeSolveNew, TreeSolveView, TreeSolveRule, TreeSolveTable;

* Вывод справки
Help {
  = <MessageBox
      'Решение задачи Эйнштейна на Рефал-05.\n\n'
      'Задача Эйнштейна.\n\n'
      'Условия:\n'
      '1. Есть 5 домов разных цветов.\n'
      '2. В каждом доме живет по одному человеку, отличающегося от другого по национальности.\n'
      '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
      '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.\n\n'
      'Вопрос: Чья рыба?\n\n'
      'Подсказки:\n'
      '1.  Англичанин живет в красном доме.\n'
      '2.  У шведа есть собака.\n'
      '3.  Датчанин пьет чай.\n'
      '4.  Зеленый дом стоит слева от белого.\n'
      '5.  Обитатель зеленого дома пьет кофе.\n'
      '6.  Человек, который курит Pall Mall, держит птицу.\n'
      '7.  Обитатель среднего дома пьет молоко.\n'
      '8.  Обитатель желтого дома курит Dunhill.\n'
      '9.  Норвежец живет в первом доме.\n'
      '10. Курильщик Marlboro живет возле того, у кого есть кошка.\n'
      '11. Человек, у которого есть конь, живет возле того, кто курит Dunhill.\n'
      '12. Курильщик Winfield пьет пиво.\n'
      '13. Норвежец живет возле голубого дома.\n'
      '14. Немец курит Rothmans.\n'
      '15. Курильщик Marlboro живет по соседству с человеком, который пьет воду.'
    >
}

/*

<Rule s.Rule> == e.Rule

s.Rule ::= s.Number
e.Rule ::= s.Predicate e.Object e.Object | Fish
s.Predicate ::= Member | Nextto  | Near
e.Object ::= Color s.Color | Nationality s.Nationality | Cigarettes s.Cigarettes | Animal s.Animal | Drink s.Drink 
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer

*/
Rule {
  /* 1. Англичанин живет в красном доме. */
  1 =
    Member Color Red Nationality Englishman;
  /* 2. У шведа есть собака. */
  2 =
    Member Nationality Shwed Animal Dog;
  /* 3. Датчанин пьет чай. */
  3 =
    Member Nationality Danish Drink Tea;
  /* 4. Зеленый дом стоит слева от белого. */
  4 =
    Nextto Color Green Color White;
  /* 5. Обитатель зеленого дома пьет кофе. */
  5 =
    Member Color Green Drink Coffee;
  /* 6. Человек, который курит Pall Mall, держит птицу. */
  6 =
    Member Cigarettes PallMall Animal Bird;
  /* 7. Обитатель среднего дома пьет молоко. */
  7 =
    Member Home 3 Drink Milk;
  /* 8. Обитатель желтого дома курит Dunhill. */
  8 =
    Member Color Yellow Cigarettes Dunhill;
  /* 9. Норвежец живет в первом доме. */
  9 =
    Member Home 1 Nationality Norwegian;
  /* 10. Курильщик Marlboro живет возле того, у кого есть кошка. */
  10 =
    Near Cigarettes Marlboro Animal Cat;
  /* 11. Человек, у которого есть конь, живет возле того, кто курит Dunhill. */
  11 =
    Near Animal Horse Cigarettes Dunhill;
  /* 12. Курильщик Winfield пьет пиво. */
  12 =
    Member Cigarettes Winfield Drink Beer;
  /* 13. Норвежец живет возле голубого дома. */
  13 =
    Near Nationality Norwegian Color Blue;
  /* 14. Немец курит Rothmans. */
  14 =
    Member Nationality German Cigarettes Rothmans;
  /* 15. Курильщик Marlboro живет по соседству с человеком, который пьет воду. */
  15 =
    Near Cigarettes Marlboro Drink Water;
  /* 16. Рыба - пятое животное. */
  16 =
    Fish    
}

/*

<RuleText s.Rule> == e.RuleText

s.Rule ::= s.NUMBER
e.RuleText ::= 'Англичанин живет в красном доме.' | 'У шведа есть собака.' |
  | 'Датчанин пьет чай.' | 'Зеленый дом стоит слева от белого.' | 'Обитатель зеленого дома пьет кофе.' |
  | 'Человек, который курит Pall Mall, держит птицу.' | 'Обитатель среднего дома пьет молоко.' |
  | 'Норвежец живет в первом доме.' | 'Курильщик Marlboro живет возле того, у кого есть кошка.' |
  | 'Человек, у которого есть конь, живет возле того, кто курит Dunhill.' | 'Курильщик Winfield пьет пиво.' |
  | 'Норвежец живет возле голубого дома.' | 'Немец курит Rothmans.' | 
  | 'Курильщик Marlboro живет по соседству с человеком, который пьет воду.' | 
  | 'Начальные условия.'
  | 'Рыба - пятое животное.'

*/
RuleText {
  0 = 
    'Начальные условия.';
  1 =
    'Англичанин живет в красном доме.';
  2 =
    'У шведа есть собака.';
  3 =
    'Датчанин пьет чай.';
  4 =
    'Зеленый дом стоит слева от белого.';
  5 =
    'Обитатель зеленого дома пьет кофе.';
  6 =
    'Человек, который курит Pall Mall, держит птицу.';
  7 =
    'Обитатель среднего дома пьет молоко.';
  8 =
    'Обитатель желтого дома курит Dunhill.';
  9 =
    'Норвежец живет в первом доме.';
  10 =
    'Курильщик Marlboro живет возле того, у кого есть кошка.';
  11 =
    'Человек, у которого есть конь, живет возле того, кто курит Dunhill.';
  12 =
    'Курильщик Winfield пьет пиво.';
  13 =
    'Норвежец живет возле голубого дома.';
  14 =
    'Немец курит Rothmans.';
  15 =
    'Курильщик Marlboro живет по соседству с человеком, который пьет воду.';
  16 = 
    'Рыба - пятое животное.'
}

/*

<ObjectText e.Object> == e.ObjectText

e.Object ::= s.Color | s.Nationality | s.Cigarretes | s.Animal | s.Drink | '???'
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer
e.ObjectText ::= 'Жёлтый' | 'Голубой' | 'Красный' | 'Зелёный' | 'Белый' |
  | 'Норвежец' | 'Датчанин'  |  'Англичанин' | 'Немец' | 'Швед'  |
  | 'Dunhill' | 'Rothmans'  |  'Pall Mall' | 'Marlboro' | 'Winfield'  |
  | 'Кошка' | 'Конь'  |  'Птица' | 'Рыба' | 'Собака'  |
  | 'Вода' | 'Чай'  |  'Молоко' | 'Кофе' | 'Пиво' | '???'

*/
ObjectText {
  Yellow =
    'Жёлтый';
  Blue =
    'Голубой';
  Red =
    'Красный';
  Green =
    'Зелёный';
  White =
    'Белый';     
  Norwegian =
    'Норвежец'; 
  Danish =
    'Датчанин';  
  Englishman =
    'Англичанин';
  German =
    'Немец'; 
  Shwed =
    'Швед';   
  Dunhill =
    'Dunhill';
  Rothmans =
    'Rothmans';
  PallMall =
    'Pall Mall';
  Marlboro =
    'Marlboro'; 
  Winfield =
    'Winfield';  
  Cat =
    'Кошка';    
  Horse =
    'Конь';
  Bird =
    'Птица'; 
  Fish =
    'Рыба';
  Dog =
    'Собака';
  Water =
    'Вода';  
  Tea =
    'Чай';
  Milk =
    'Молоко'; 
  Coffee =
    'Кофе';
  Beer =
    'Пиво';
  '???' =
    '???'  
}

/*

<Solve e.Solve> == e.Solve

e.Solve ::= (s.Rule (e.Rules) e.Tables '=' e.exTable)+

e.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.exTable ::= e.Table | Impossible
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
Solve {
  /* Возврат к предыдущему правилу */
  e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' e.Table) (s.Rule (e.Rules) '=' Impossible) =
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    <Solve e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' Impossible)>;
  /* Переход к следующему применению правила */
  e.Solve-B (s.Rule (e.Rules) (e.Table) e.RestTables '=' Impossible) =
    <Rp Steps '=' <Inc <Cp Steps>>>
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    <Solve e.Solve-B (s.Rule (e.Rules) e.RestTables '=' e.Table)>;
  /* Решение найдено */
  e.Solve-B (s.Rule () e.Tables '=' e.Table) =
    <Rp Steps '=' <Inc <Cp Steps>>>
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    e.Solve-B (s.Rule () e.Tables '=' e.Table) (16 () '=' <ApplyRule <Rule 16> e.Table>);  
  /* Переход к следующему правилу */  
  e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table),
  <FindMinRule (e.Rules) e.Table>: s.MinRule,
  e.Rules: e.Rules-B s.MinRule e.Rules-E,
  <Br RuleTables '='>
  <ApplyRule <Rule s.MinRule> e.Table>
  <Dg RuleTables>: 
  {
    (e.NewTable) e.RestNewTables =
      <Rp Steps '=' <Inc <Cp Steps>>>
      <Rp StepsBack '=' <Inc <Cp StepsBack>>>
      <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table) (s.MinRule (e.Rules-B e.Rules-E) e.RestNewTables '=' e.NewTable)>;
    =
      <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' Impossible)>
  }      
}

/*

<FindMinRule (e.Rules) e.Table> == s.Rule

e.Rules ::= s.Rule+
s.Rule ::= s.NUMBER
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
FindMinRule {
  (s.Rule) e.Table =
    s.Rule;
  (s.Rule e.RestRules) e.Table,
  <Br RuleTables '='>
  <ApplyRule <Rule s.Rule> e.Table>
  <Lenw <Dg RuleTables>>: s.MinLen e.Tables =
    <FindMinRule-Aux s.MinLen s.Rule (e.RestRules) e.Table>
}

FindMinRule-Aux {
  0 s.MinRule (e.Rules) e.Table =
    s.MinRule;
  s.MinLen s.MinRule () e.Table =
    s.MinRule;
  s.MinLen s.MinRule (s.Rule e.RestRules) e.Table,
  <Br RuleTables '='>
  <ApplyRule <Rule s.Rule> e.Table>
  <Lenw <Dg RuleTables>>: s.LenRule e.Tables,
  <MinRule (s.MinLen s.MinRule) (s.LenRule s.Rule)>: (s.NewMinLen s.NewMinRule) =
    <FindMinRule-Aux s.NewMinLen s.NewMinRule (e.RestRules) e.Table>
}

/*

<MinRule t.MinRule t.Rule> == t.NewMinRule

t.MinRule, t.Rule, t.NewMinRule ::= (s.Len s.Rule)
s.Len, s.Rule ::= s.NUMBER

*/
MinRule {
  (s.MinLen s.MinRule) (s.LenRule s.Rule),
  <Compare s.MinLen s.LenRule>: '+' =
    (s.LenRule s.Rule);
  (s.MinLen s.MinRule) (s.LenRule s.Rule) =
    (s.MinLen s.MinRule)
}

/*

<ApplyRule e.Rule e.Table> ==

e.Rule ::= s.Predicate e.Object e.Object | Fish
s.Predicate ::= Member | Nextto  | Near
e.Object ::= Color s.Color | Nationality s.Nationality | Cigarettes s.Cigarettes | Animal s.Animal | Drink s.Drink 
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Color ::= s.Color | '???'
e.Nationality ::= s.Nationality | '???'
e.Cigarettes ::= s.Cigarettes | '???'
e.Animal ::= s.Animal | '???'
e.Drink ::= s.Drink | '???'

*/
ApplyRule {
  /* Member - 2 объекта в одном доме */
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)>;   
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table,
  <Exist s.Category1 s.Object1 e.Table>: True,
  <Exist s.Category2 s.Object2 e.Table>: True =
    ; 
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 '???' e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)>;  
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.OtherObject2 e.Home-E) e.Table-E =
    ;    
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 '???' e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)>;
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.OtherObject1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E =
    ;  
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 '???' e.Home-M s.Category2 '???' e.Home-E) e.Table-E,
  <Rp RuleTables '='
    <Cp RuleTables>
    (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)
  >: False =
    ;
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table =
    ;
  /* Nextto - 1 объект в доме слева дома 2 объекта */
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>;   
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table,
  <Exist s.Category1 s.Object1 e.Table>: True,
  <Exist s.Category2 s.Object2 e.Table>: True =
    ; 
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 '???' e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>;  
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.OtherObject1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E =
    ;
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  (e.Home-B s.Category2 s.Object2 e.Home-E) e.Table-E =
    ;      
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 '???' e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>;
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.OtherObject2 e.HomeR-E) e.Table-E =
    ;
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-E) =
    ;  
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 '???' e.HomeL-E) (e.HomeR-B s.Category2 '???' e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>: False =
    ;
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table =
    ;
  /* Near - 2 объекта в соседних домах */
  Near s.Category1 s.Object1 s.Category2 s.Object2
  e.Table =
    <ApplyRule Nextto s.Category1 s.Object1 s.Category2 s.Object2 e.Table>
    <Br RuleTablesTemp '=' <Cp RuleTables>>
    <Rp RuleTables '='>
    <ApplyRule Nextto s.Category2 s.Object2 s.Category1 s.Object1 e.Table>
    <Rp RuleTables '=' <Dg RuleTablesTemp> <Cp RuleTables>>;
  /* Fish - рыба - пятое животное */
  Fish
  e.Table-B (e.Home-B Animal '???' e.Home-E) e.Table-E =
    e.Table-B (e.Home-B Animal Fish e.Home-E) e.Table-E
}

/*

<Exist e.Object e.Table> == True | False

e.Object ::= Color s.Color | Nationality s.Nationality | Cigarettes s.Cigarettes | Animal s.Animal | Drink s.Drink 
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Color ::= s.Color | '???'
s.Color ::= Yellow | Blue | Red | Green | White
e.Nationality ::= s.Nationality | '???'
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
e.Cigarettes ::= s.Cigarettes | '???'
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
e.Animal ::= s.Animal | '???'
s.Animal ::= Cat | Horse | Bird | Fish | Dog
e.Drink ::= s.Drink | '???'
s.Drink ::= Water | Tea | Milk | Coffee | Beer

*/
Exist {
  s.Category s.Object e.Table-B (e.Home-B s.Category s.Object e.Home-E) e.Table-E =
    True;
  s.Category s.Object e.Table =
    False  
}

/*

<Answer e.Table> == e.NationalityText

e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Animal s.Animal Drink s.Drink
e.Home2 ::= Home 2 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Animal s.Animal Drink s.Drink
e.Home3 ::= Home 3 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Animal s.Animal Drink s.Drink
e.Home4 ::= Home 4 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Animal s.Animal Drink s.Drink
e.Home5 ::= Home 5 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Animal s.Animal Drink s.Drink
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed 
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield 
s.Animal ::= Cat | Horse | Bird | Fish | Dog 
s.Drink ::= Water | Tea | Milk | Coffee | Beer 
e.NationalityText ::= 'Норвежец'  | 'Датчанин'  |  'Англичанин' | 'Немец' | 'Швед'

*/
Answer {
  e.Table-B (e.Home-B Nationality s.Nationality e.Home-M Animal Fish e.Home-E) e.Table-E = 
    <ObjectText s.Nationality>
}    

/*

<DoMapSolve t.RuleSolve> ==

t.RuleSolve ::= (s.Rule (e.Rules) e.Tables '=' e.Table)
s.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/

DoMapSolve {
  (s.Rule (e.Rules) e.Tables '=' e.Table) =
    <TreeSolveRule ('Подсказка ' <Symb s.Rule>) <RuleText s.Rule>>
    <Map DoMapTable e.Table>
}

/*

<DoMapTable t.Table> ==

t.Table ::= (e.Home1) | (e.Home2) | (e.Home3) | (e.Home4) | (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/

DoMapTable {
  (Home s.Home Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Animal e.Animal Drink e.Drink) =
    <TreeSolveTable
      <Symb s.Home>
      (<ObjectText e.Color>)
      (<ObjectText e.Nationality>)
      (<ObjectText e.Cigarettes>)
      (<ObjectText e.Animal>)
      <ObjectText e.Drink>
    >
}

$ENTRY Go {
  , 
  <GTKInit>
  <Help>
  <Br Steps '=' 0>
  <Br StepsBack '=' 0>
  <Solve    
    (0 (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) '='
      (Home 1 Color '???' Nationality '???' Cigarettes '???' Animal '???' Drink '???')
      (Home 2 Color '???' Nationality '???' Cigarettes '???' Animal '???' Drink '???')
      (Home 3 Color '???' Nationality '???' Cigarettes '???' Animal '???' Drink '???')
      (Home 4 Color '???' Nationality '???' Cigarettes '???' Animal '???' Drink '???')
      (Home 5 Color '???' Nationality '???' Cigarettes '???' Animal '???' Drink '???')
    )
  >: e.Solve-B (16 () '=' e.Table) =
    <MessageBox 'Вопрос: Чья рыба?\nОтвет: ' <Answer e.Table> ' держит рыбу.'>
    <TreeSolveNew>
    <Map DoMapSolve e.Solve-B (16 () '=' e.Table)>
    <TreeSolveView>
    <MessageBox
      'Количество шагов без возвратов: ' <Symb <Dg Steps>> '.\n'
      'Количество шагов с возвратами: ' <Symb <Dg StepsBack>> '.\n'
    >
}
