* Copyright 2023 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt
* 2023-07-03
* https://github.com/Aleksandr3Bocharov/TaskEinshtein

/*

Задача Эйнштейна

Программа "TaskEinshtein" написана на языке программирования Рефал-5λ.
https://github.com/bmstu-iu9/refal-5-lambda

Решение задачи Эйнштейна на Рефал-5λ.

Задача Эйнштейна.

Условия:
1. Есть 5 домов разных цветов.
2. В каждом доме живет по одному человеку отличающегося от другого по национальности.
3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.
4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.

Вопрос: Чья рыба?

Подсказки:
1.  Англичанин живет в красном доме.
2.  У шведа есть собака.
3.  Датчанин пьет чай.
4.  Зеленый дом стоит слева от белого.
5.  Обитатель зеленого дома пьет кофе.
6.  Человек, который курит Pall Mall, держит птицу.
7.  Обитатель среднего дома пьет молоко.
8.  Обитатель желтого дома курит Dunhill.
9.  Норвежец живет в первом доме.
10. Курильщик Marlboro живет возле того, у кого есть кошка.
11. Человек, у которого есть конь, живет возле того, кто курит Dunhill.
12. Курильщик Winfield пьет пиво.
13. Норвежец живет возле голубого дома.
14. Немец курит Rothmans.
15. Курильщик Marlboro живет по соседству с человеком, который пьет воду.

*/

*$FROM LibraryEx
$EXTERN Map, MapAccum, Inc, Trim;

/*

<RU e.String> == e.String

e.String ::= s.CHAR*

*/
RU {
    =
      ;
    'Ё' e.RestChars =
      <Chr 240> <RU e.RestChars>;
    'ё' e.RestChars =
      <Chr 241> <RU e.RestChars>;
    s.Char1 s.Char2 e.RestChars,
    <isRU s.Char1 s.Char2>:208 =
      <Chr <Sub <Ord s.Char2> 16>> <RU e.RestChars>;
    s.Char1 s.Char2 e.RestChars,
    <isRU s.Char1 s.Char2>:209 =
      <Chr <Add <Ord s.Char2> 96>> <RU e.RestChars>;
    s.Char e.RestChars =
      s.Char <RU e.RestChars>;
  }
  
  /*
  
  <isRU e.Char> == s.isRU
  
  e.Char ::= s.CHAR s.CHAR
  s.isRU ::= 208 | 209 | False
  
  */
  isRU {
    e.Char,
    <Compare (<Ord e.Char>) 208 143>: '+',
    <Compare (<Ord e.Char>) 208 192>: '-' =
      208;
    e.Char,
    <Compare (<Ord e.Char>) 209 127>: '+',
    <Compare (<Ord e.Char>) 209 144>: '-' =
      209;
    e.Char =
      False
  }

* Вывод справки
Help {
  = <Prout
      <RU
        '\nРешение задачи Эйнштейна на Рефал-5 Лямбда.\n\n'
        'Задача Эйнштейна.\n\n'
        'Условия:\n'
        '1. Есть 5 домов разных цветов.\n'
        '2. В каждом доме живет по одному человеку отличающегося от другого по национальности.\n'
        '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
        '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.\n\n'
        'Вопрос: Чья рыба?\n\n'
        'Подсказки:\n'
        '1.  Англичанин живет в красном доме.\n'
        '2.  У шведа есть собака.\n'
        '3.  Датчанин пьет чай.\n'
        '4.  Зеленый дом стоит слева от белого.\n'
        '5.  Обитатель зеленого дома пьет кофе.\n'
        '6.  Человек, который курит Pall Mall, держит птицу.\n'
        '7.  Обитатель среднего дома пьет молоко.\n'
        '8.  Обитатель желтого дома курит Dunhill.\n'
        '9.  Норвежец живет в первом доме.\n'
        '10. Курильщик Marlboro живет возле того, у кого есть кошка.\n'
        '11. Человек, у которого есть конь, живет возле того, кто курит Dunhill.\n'
        '12. Курильщик Winfield пьет пиво.\n'
        '13. Норвежец живет возле голубого дома.\n'
        '14. Немец курит Rothmans.\n'
        '15. Курильщик Marlboro живет по соседству с человеком, который пьет воду.\n\n\n'
      >
    >
}

/*

<Solve e.Solve> == 

e.Solve ::= (s.Rule (e.Rules) e.Tables '=' e.exTable)+

e.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.exTable ::= e.Table | Impossible
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
Solve {
  /* Найдено решение */
  e.Solve-B
  (s.Rule (e.Rules) e.Tables '=' 
    (Home 1) (Color s.Color1) (Nationality s.Nationality1) (Cigarettes s.Cigarettes1) (Animal s.Animal1) (Drink s.Drink1)
    (Home 2) (Color s.Color2) (Nationality s.Nationality2) (Cigarettes s.Cigarettes2) (Animal s.Animal2) (Drink s.Drink2)
    (Home 3) (Color s.Color3) (Nationality s.Nationality3) (Cigarettes s.Cigarettes3) (Animal s.Animal3) (Drink s.Drink3)
    (Home 4) (Color s.Color4) (Nationality s.Nationality4) (Cigarettes s.Cigarettes4) (Animal s.Animal4) (Drink s.Drink4)
    (Home 5) (Color s.Color5) (Nationality s.Nationality5) (Cigarettes s.Cigarettes5) (Animal s.Animal5) (Drink s.Drink5)
  ) =
    <Rp Solves '='
      <Cp Solves>
      (
        e.Solve-B
        (
          s.Rule (e.Rules) e.Tables '='
          (Home 1) (Color s.Color1) (Nationality s.Nationality1) (Cigarettes s.Cigarettes1) (Animal s.Animal1) (Drink s.Drink1)
          (Home 2) (Color s.Color2) (Nationality s.Nationality2) (Cigarettes s.Cigarettes2) (Animal s.Animal2) (Drink s.Drink2)
          (Home 3) (Color s.Color3) (Nationality s.Nationality3) (Cigarettes s.Cigarettes3) (Animal s.Animal3) (Drink s.Drink3)
          (Home 4) (Color s.Color4) (Nationality s.Nationality4) (Cigarettes s.Cigarettes4) (Animal s.Animal4) (Drink s.Drink4)
          (Home 5) (Color s.Color5) (Nationality s.Nationality5) (Cigarettes s.Cigarettes5) (Animal s.Animal5) (Drink s.Drink5)
        )
      )
    >
    <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' Impossible)>;
  /* Поиск завершён */
  (0 (e._) '=' Impossible) =
    ;
  /* Возврат к предыдущему правилу */
  e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' e._) (s.Rule (e._) '=' Impossible) =
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    <Solve e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' Impossible)>;
  /* Переход к следующему применению правила */
  e.Solve-B (s.Rule (e.Rules) (e.Table) e.RestTables '=' Impossible) =
    <Rp Steps '=' <Inc <Cp Steps>>>
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    <Solve e.Solve-B (s.Rule (e.Rules) e.RestTables '=' e.Table)>;
  /* Найдено неполное решение */
  e.Solve-B (s.Rule () e.Tables '=' e.Table) =
    <Rp Solves '=' <Cp Solves> (e.Solve-B (s.Rule () e.Tables '=' e.Table))>
    <Solve e.Solve-B (s.Rule () e.Tables '=' Impossible)>;
  /* Переход к следующему правилу */  
  e.Solve-B (s.Rule (s.NextRule e.RestRules) e.Tables '=' e.Table) =
    <Br RuleTables '='>
    <ApplyRule s.NextRule e.Table>
    <Dg RuleTables>:
    {
      (e.NewTable) e.RestNewTables =
        <Rp Steps '=' <Inc <Cp Steps>>>
        <Rp StepsBack '=' <Inc <Cp StepsBack>>>
        <Solve e.Solve-B (s.Rule (s.NextRule e.RestRules) e.Tables '=' e.Table) (s.NextRule (e.RestRules) e.RestNewTables '=' e.NewTable)>;
      =
        <Solve e.Solve-B (s.Rule (s.NextRule e.RestRules) e.Tables '=' Impossible)>
    }      
}

/*

<ApplyRule s.Rule e.Table> ==

s.Rule ::= s.NUMBER
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
ApplyRule {
  /* 1.  Англичанин живет в красном доме. */
  1 e.Table-B (e.Home-B (Color Red) (Nationality Englishman) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Red) (Nationality Englishman) e.Home-E) e.Table-E)>;   
  1 e.Table,
  <Exist (Color Red) e.Table>: True,
  <Exist (Nationality Englishman) e.Table>: True =
    ; 
  1 e.Table-B (e.Home-B (Color Red) (Nationality '???') e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Red) (Nationality Englishman) e.Home-E) e.Table-E)>;  
  1 e._ (e._ (Color Red) (Nationality s._) e._) e._ =
    ;    
  1 e.Table-B (e.Home-B (Color '???') (Nationality Englishman) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Red) (Nationality Englishman) e.Home-E) e.Table-E)>;
  1 e._ (e._ (Color s._) (Nationality Englishman) e._) e._ =
    ;  
  1 e.Table-B (e.Home-B (Color '???') (Nationality '???') e.Home-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Color Red) (Nationality Englishman) e.Home-E) e.Table-E)>: False =
    ;
  1 e._ =
    ;
  /* 2. У шведа есть собака. */  
  2 e.Table-B (e.Home-B (Nationality Shwed) e.Home-M (Animal Dog) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Nationality Shwed) e.Home-M (Animal Dog) e.Home-E) e.Table-E)>;   
  2 e.Table,
  <Exist (Animal Dog) e.Table>: True,
  <Exist (Nationality Shwed) e.Table>: True =
    ; 
  2 e.Table-B (e.Home-B (Nationality '???') e.Home-M (Animal Dog) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Nationality Shwed) e.Home-M (Animal Dog) e.Home-E) e.Table-E)>; 
  2 e._ (e._ (Nationality s._) e._ (Animal Dog) e._) e._ =
    ;     
  2 e.Table-B (e.Home-B (Nationality Shwed) e.Home-M (Animal '???') e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Nationality Shwed) e.Home-M (Animal Dog) e.Home-E) e.Table-E)>;
  2 e._ (e._ (Nationality Shwed) e._ (Animal s._) e._) e._ =
    ;  
  2 e.Table-B (e.Home-B (Nationality '???') e.Home-M (Animal '???') e.Home-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Nationality Shwed) e.Home-M (Animal Dog) e.Home-E) e.Table-E)>: False =
    ;
  2 e._ =
    ;  
  /* 3. Датчанин пьет чай. */  
  3 e.Table-B (e.Home-B (Nationality Danish) e.Home-M (Drink Tea)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Nationality Danish) e.Home-M (Drink Tea)) e.Table-E)>;   
  3 e.Table,
  <Exist (Drink Tea) e.Table>: True,
  <Exist (Nationality Danish) e.Table>: True =
    ; 
  3 e.Table-B (e.Home-B (Nationality '???') e.Home-M (Drink Tea)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Nationality Danish) e.Home-M (Drink Tea)) e.Table-E)>;
  3 e._ (e._ (Nationality s._) e._ (Drink Tea)) e._ =
    ;    
  3 e.Table-B (e.Home-B (Nationality Danish) e.Home-M (Drink '???')) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Nationality Danish) e.Home-M (Drink Tea)) e.Table-E)>;
  3 e._ (e._ (Nationality Danish) e._ (Drink s._)) e._ =
    ;  
  3 e.Table-B (e.Home-B (Nationality '???') e.Home-M (Drink '???')) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Nationality Danish) e.Home-M (Drink Tea)) e.Table-E)>: False =
    ;
  3 e._ =
    ;  
  /* 4. Зеленый дом стоит слева от белого. */  
  4 e.Table-B (e.HomeL-B (Color Green) e.HomeL-E) (e.HomeR-B (Color White) e.HomeR-E) e.Table-E =
   <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Color Green) e.HomeL-E) (e.HomeR-B (Color White) e.HomeR-E) e.Table-E)>;   
  4 e.Table,
  <Exist (Color Green) e.Table>: True,
  <Exist (Color White) e.Table>: True =
    ; 
  4 e.Table-B (e.HomeL-B (Color '???') e.HomeL-E) (e.HomeR-B (Color White) e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Color Green) e.HomeL-E) (e.HomeR-B (Color White) e.HomeR-E) e.Table-E)>;  
  4 e._ (e._ (Color s._) e._) (e._ (Color White) e._) e._ =
    ;
  4 (e._ (Color White) e._) e._ =
    ;      
  4 e.Table-B (e.HomeL-B (Color Green) e.HomeL-E) (e.HomeR-B (Color '???') e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Color Green) e.HomeL-E) (e.HomeR-B (Color White) e.HomeR-E) e.Table-E)>;
  4 e._ (e._ (Color Green) e._) (e._ (Color s._) e._) e._ =
    ;
  4 e._ (e._ (Color Green) e._) =
    ;  
  4 e.Table-B (e.HomeL-B (Color '???') e.HomeL-E) (e.HomeR-B (Color '???') e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Color Green) e.HomeL-E) (e.HomeR-B (Color White) e.HomeR-E) e.Table-E)>: False =
    ;
  4 e._ =
    ;     
  /* 5. Обитатель зеленого дома пьет кофе. */
  5 e.Table-B (e.Home-B (Color Green) e.Home-M (Drink Coffee)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Green) e.Home-M (Drink Coffee)) e.Table-E)>;   
  5 e.Table,
  <Exist (Color Green) e.Table>: True,
  <Exist (Drink Coffee) e.Table>: True =
    ; 
  5 e.Table-B (e.Home-B (Color Green) e.Home-M (Drink '???')) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Green) e.Home-M (Drink Coffee)) e.Table-E)>;  
  5 e._ (e._ (Color Green) e._ (Drink s._)) e._ =
    ;    
  5 e.Table-B (e.Home-B (Color '???') e.Home-M (Drink Coffee)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Green) e.Home-M (Drink Coffee)) e.Table-E)>;
  5 e._ (e._ (Color s._) e._ (Drink Coffee)) e._ =
    ;  
  5 e.Table-B (e.Home-B (Color '???') e.Home-M (Drink '???')) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Color Green) e.Home-M (Drink Coffee)) e.Table-E)>: False =
    ;
  5 e._ =
    ;  
  /* 6. Человек, который курит Pall Mall, держит птицу. */
  6 e.Table-B (e.Home-B (Cigarettes PallMall) (Animal Bird) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Cigarettes PallMall) (Animal Bird) e.Home-E) e.Table-E)>;   
  6 e.Table,
  <Exist (Cigarettes PallMall) e.Table>: True,
  <Exist (Animal Bird) e.Table>: True =
    ; 
  6 e.Table-B (e.Home-B (Cigarettes PallMall) (Animal '???') e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Cigarettes PallMall) (Animal Bird) e.Home-E) e.Table-E)>;  
  6 e._ (e._ (Cigarettes PallMall) (Animal s._) e._) e._ =
    ;    
  6 e.Table-B (e.Home-B (Cigarettes '???') (Animal Bird) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Cigarettes PallMall) (Animal Bird) e.Home-E) e.Table-E)>;
  6 e._ (e._ (Cigarettes s._) (Animal Bird) e._) e._ =
    ;  
  6 e.Table-B (e.Home-B (Cigarettes '???') (Animal '???') e.Home-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Cigarettes PallMall) (Animal Bird) e.Home-E) e.Table-E)>: False =
    ;
  6 e._ =
    ; 
  /* 7. Обитатель среднего дома пьет молоко. */
  7 e.Table-B ((Home 3) e.Home-M (Drink Milk)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B ((Home 3) e.Home-M (Drink Milk)) e.Table-E)>;   
  7 e.Table,
  <Exist (Drink Milk) e.Table>: True =
    ;     
  7 e.Table-B ((Home 3) e.Home-M (Drink '???')) e.Table-E =
    <Rp RuleTables '=' (e.Table-B ((Home 3) e.Home-M (Drink Milk)) e.Table-E)>;  
  7 e._ ((Home 3) e._ (Drink s._)) e._ =
    ;  
  /* 8. Обитатель желтого дома курит Dunhill. */  
  8 e.Table-B (e.Home-B (Color Yellow) e.Home-M (Cigarettes Dunhill) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Yellow) e.Home-M (Cigarettes Dunhill) e.Home-E) e.Table-E)>;   
  8 e.Table,
  <Exist (Cigarettes Dunhill) e.Table>: True,
  <Exist (Color Yellow) e.Table>: True =
    ; 
  8 e.Table-B (e.Home-B (Color '???') e.Home-M (Cigarettes Dunhill) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Yellow) e.Home-M (Cigarettes Dunhill) e.Home-E) e.Table-E)>; 
  8 e._ (e._ (Color s._) e._ (Cigarettes Dunhill) e._) e._ =
    ;     
  8 e.Table-B (e.Home-B (Color Yellow) e.Home-M (Cigarettes '???') e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Color Yellow) e.Home-M (Cigarettes Dunhill) e.Home-E) e.Table-E)>;
  8 e._ (e._ (Color Yellow) e._ (Cigarettes s._) e._) e._ =
    ;  
  8 e.Table-B (e.Home-B (Color '???') e.Home-M (Cigarettes '???') e.Home-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Color Yellow) e.Home-M (Cigarettes Dunhill) e.Home-E) e.Table-E)>: False =
    ;
  8 e._ =
    ;   
  /* 9. Норвежец живет в первом доме. */
  9 e.Table-B ((Home 1) e.Home-M (Nationality Norwegian) e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B ((Home 1) e.Home-M (Nationality Norwegian) e.Home-E) e.Table-E)>;   
  9 e.Table,
  <Exist (Nationality Norwegian) e.Table>: True =
    ;     
  9 e.Table-B ((Home 1) e.Home-M (Nationality '???') e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B ((Home 1) e.Home-M (Nationality Norwegian) e.Home-E) e.Table-E)>;  
  9 e._ ((Home 1) e._ (Nationality s._) e._) e._ =
    ;   
  /* 10. Курильщик Marlboro живет возле того, у кого есть кошка. */  
  10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E =
   <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E)>;
  10 e.Table-B (e.HomeL-B (Animal Cat) e.HomeL-E) (e.HomeR-B (Cigarettes Marlboro) e.HomeR-E) e.Table-E =
   <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Animal Cat) e.HomeL-E) (e.HomeR-B (Cigarettes Marlboro) e.HomeR-E) e.Table-E)>; 
  10 e.Table,
  <Exist (Cigarettes Marlboro) e.Table>: True,
  <Exist (Animal Cat) e.Table>: True =
    ; 
  10 e.Table-B (e.HomeL-B (Cigarettes '???') e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E)>
    <ApplyRule R10 e.Table-B (e.HomeL-B (Cigarettes '???') e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E>;  
  10 e.Table-B (e.HomeL-B (Cigarettes s.Cigarettes) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E =
    <ApplyRule R10 e.Table-B (e.HomeL-B (Cigarettes s.Cigarettes) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E>;
  10 (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E =
    <ApplyRule R10 (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E>;   
  10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal '???') e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E)>
    <ApplyRule R10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal '???') e.HomeR-E) e.Table-E>;
  10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal s.Animal) e.HomeR-E) e.Table-E =
    <ApplyRule R10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal s.Animal) e.HomeR-E) e.Table-E>;
  10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) =
    <ApplyRule R10 e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E)>;  
  10 e.Table-B (e.HomeL-B (Cigarettes '???') e.HomeL-E) (e.HomeR-B (Animal '???') e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Cigarettes Marlboro) e.HomeL-E) (e.HomeR-B (Animal Cat) e.HomeR-E) e.Table-E)>: False =
    ;
  10 e.Table =
    <ApplyRule R10 e.Table>; 
  R10 e.Table-B (e.HomeL-B (Animal Cat) e.HomeL-E) (e.HomeR-B (Cigarettes '???') e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Animal Cat) e.HomeL-E) (e.HomeR-B (Cigarettes Marlboro) e.HomeR-E) e.Table-E)>; 
  R10 e._ (e._ (Animal Cat) e._) (e._ (Cigarettes s._) e._) e._ =
    ;
  R10 e._ (e._ (Animal Cat) e._) =
    ;         
  R10 e.Table-B (e.HomeL-B (Animal '???') e.HomeL-E) (e.HomeR-B (Cigarettes Marlboro) e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Animal Cat) e.HomeL-E) (e.HomeR-B (Cigarettes Marlboro) e.HomeR-E) e.Table-E)>;
  R10 e._ (e._ (Animal s._) e._) (e._ (Cigarettes Marlboro) e._) e._ =
    ; 
  R10 (e._ (Cigarettes Marlboro) e._) e._ =
    ;     
  R10 e.Table-B (e.HomeL-B (Animal '???') e.HomeL-E) (e.HomeR-B (Cigarettes '???') e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Animal Cat) e.HomeL-E) (e.HomeR-B (Cigarettes Marlboro) e.HomeR-E) e.Table-E)>: False =
    ;
  R10 e._ =
    ;  
  /* 11. Человек, у которого есть конь, живет возле того, кто курит Dunhill. */  
  11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E =
   <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E)>;
  11 e.Table-B (e.HomeL-B (Animal Horse) e.HomeL-E) (e.HomeR-B (Cigarettes Dunhill) e.HomeR-E) e.Table-E =
   <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Animal Horse) e.HomeL-E) (e.HomeR-B (Cigarettes Dunhill) e.HomeR-E) e.Table-E)>; 
  11 e.Table,
  <Exist (Cigarettes Dunhill) e.Table>: True,
  <Exist (Animal Horse) e.Table>: True =
    ; 
  11 e.Table-B (e.HomeL-B (Cigarettes '???') e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E)>
    <ApplyRule R11 e.Table-B (e.HomeL-B (Cigarettes '???') e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E>;  
  11 e.Table-B (e.HomeL-B (Cigarettes s.Cigarettes) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E =
    <ApplyRule R11 e.Table-B (e.HomeL-B (Cigarettes s.Cigarettes) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E>;
  11 (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E =
    <ApplyRule R11 (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E>;   
  11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal '???') e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E)>
    <ApplyRule R11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal '???') e.HomeR-E) e.Table-E>;
  11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal s.Animal) e.HomeR-E) e.Table-E =
    <ApplyRule R11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal s.Animal) e.HomeR-E) e.Table-E>;
  11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) =
    <ApplyRule R11 e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E)>;  
  11 e.Table-B (e.HomeL-B (Cigarettes '???') e.HomeL-E) (e.HomeR-B (Animal '???') e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Cigarettes Dunhill) e.HomeL-E) (e.HomeR-B (Animal Horse) e.HomeR-E) e.Table-E)>: False =
    ;
  11 e.Table =
    <ApplyRule R11 e.Table>; 
  R11 e.Table-B (e.HomeL-B (Animal Horse) e.HomeL-E) (e.HomeR-B (Cigarettes '???') e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Animal Horse) e.HomeL-E) (e.HomeR-B (Cigarettes Dunhill) e.HomeR-E) e.Table-E)>; 
  R11 e._ (e._ (Animal Horse) e._) (e._ (Cigarettes s._) e._) e._ =
    ;
  R11 e._ (e._ (Animal Horse) e._) =
    ;         
  R11 e.Table-B (e.HomeL-B (Animal '???') e.HomeL-E) (e.HomeR-B (Cigarettes Dunhill) e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Animal Horse) e.HomeL-E) (e.HomeR-B (Cigarettes Dunhill) e.HomeR-E) e.Table-E)>;
  R11 e._ (e._ (Animal s._) e._) (e._ (Cigarettes Dunhill) e._) e._ =
    ; 
  R11 (e._ (Cigarettes Dunhill) e._) e._ =
    ;     
  R11 e.Table-B (e.HomeL-B (Animal '???') e.HomeL-E) (e.HomeR-B (Cigarettes '???') e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B (Animal Horse) e.HomeL-E) (e.HomeR-B (Cigarettes Dunhill) e.HomeR-E) e.Table-E)>: False =
    ;
  R11 e._ =
    ;
  /* 12. Курильщик Winfield пьет пиво. */
  12 e.Table-B (e.Home-B (Cigarettes Winfield) e.Home-M (Drink Beer)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Cigarettes Winfield) e.Home-M (Drink Beer)) e.Table-E)>;   
  12 e.Table,
  <Exist (Cigarettes Winfield) e.Table>: True,
  <Exist (Drink Beer) e.Table>: True =
    ; 
  12 e.Table-B (e.Home-B (Cigarettes Winfield) e.Home-M (Drink '???')) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Cigarettes Winfield) e.Home-M (Drink Beer)) e.Table-E)>;  
  12 e._ (e._ (Cigarettes Winfield) e.Home-M (Drink s._)) e._ =
    ;    
  12 e.Table-B (e.Home-B (Cigarettes '???') e.Home-M (Drink Beer)) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B (Cigarettes Winfield) e.Home-M (Drink Beer)) e.Table-E)>;
  12 e._ (e._ (Cigarettes s._) (Drink Beer)) e._ =
    ;  
  12 e.Table-B (e.Home-B (Cigarettes '???') e.Home-M (Drink '???')) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.Home-B (Cigarettes Winfield) e.Home-M (Drink Beer)) e.Table-E)>: False =
    ;
  12 e._ =
    ;  
  /* 13. Норвежец живет возле голубого дома. */  
 
}

/*

<Exist t.Object e.Table> == True | False

t.Object ::= (Color s.Color) | (Nationality s.Nationality) | (Cigarettes s.Cigarettes) | (Animal s.Animal) | (Drink s.Drink) 
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= s.Color | '???'
s.Color ::= Yellow | Blue | Red | Green | White
e.Nationality ::= s.Nationality | '???'
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
e.Cigarettes ::= s.Cigarettes | '???'
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
e.Animal ::= s.Animal | '???'
s.Animal ::= Cat | Horse | Bird | Fish | Dog
e.Drink ::= s.Drink | '???'
s.Drink ::= Water | Tea | Milk | Coffee | Beer

*/
Exist {
  t.Object e._ (e._ t.Object e._) e._ =
    True;
  t._ e._ =
    False  
}

/*

<Answer e.Table> == e.Answer | '<Решение не найдено>'

e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'
e.Answer ::= e.Object | e.Object ' или ' e.Answer
e.Object ::= 'Норвежец'  | 'Датчанин'  |  'Англичанин' | 'Немец' | 'Швед'

*/
Answer {
  e.Table-B (e.Home-B (Nationality e.Nationality) e.Home-M (Animal Fish) e.Home-E) e.Table-E =
    e.Nationality:
    {
      Norwegian =
        'Норвежец';
      Danish =
        'Датчанин';
      Englishman =
        'Англичанин';
      German =
        'Немец';
      Shwed =
        'Швед';
      '???' =
        <Answer-Aux
          False
          (Norwegian Danish Englishman German Shwed)
          e.Table-B (e.Home-B (Nationality e.Nationality) e.Home-M (Animal Fish) e.Home-E) e.Table-E
        >   
    };
  e._ =
    '<Решение не найдено>'    
}

Answer-Aux {
  s._ () e._ =
    ;
  s.State (s.Nationality e.RestNationalities) e.Table,
  <Exist (Nationality s.Nationality) e.Table>: False =
    s.State:
    {
      True =
        ' или ' <Trim <Format s.Nationality>>
        <Answer-Aux True (e.RestNationalities) e.Table>;
      s._ =
        <Trim <Format s.Nationality>>
        <Answer-Aux True (e.RestNationalities) e.Table>  
    };
  s.State (s._ e.RestNationalities) e.Table =
    <Answer-Aux s.State (e.RestNationalities) e.Table>    
}

/*

<PrintSolve e.Solve> ==

e.Solve ::= (s.Rule (e.Rules) e.Tables '=' e.Table)+

s.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
PrintSolve {
  e.Solve =
    <MapAccum
      {
        (s._ (e._) e.PrevTable)
        (s.Rule (e.Rules) e._ '=' e.Table) =
          (s.Rule (e.Rules) e.Table)
          <PrintRule s.Rule>
          <PrintTableCompare (e.PrevTable) (e.Table)>
          <PrintTable e.Table>
      }
      (0 ())     
      e.Solve
    >:
    {
      (s._ () e._) =
        ;
      (s._ (e.Rules) e._) =
        <Prout <RU 'Следующие подсказки не использовались при решении задачи:\n'>>
        <PrintRules e.Rules>
    }    
}

/*

<PrintTableCompare e.PrevTable e.Table> ==

e.PrevTable, e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
PrintTableCompare {
  (e.Table) (e.Table) =
    <Prout <RU 'Данная подсказка является следствием из предыдущих подсказок.\n'>>;
  (e._) (e._) =  
}

/*

<PrintTable e.Table> ==

e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= (Home 1) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home2 ::= (Home 2) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home3 ::= (Home 3) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home4 ::= (Home 4) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Home5 ::= (Home 5) (Color e.Color) (Nationality e.Nationality) (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Danish | Englishman | German | Shwed | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Animal ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
PrintTable {
  e.Table =
    <Prout <RU 'Дом '  'Цвет           ' 'Национальность ' 'Сигареты       ' 'Животное       ' 'Напиток'>>
    <Map
      {
        (
          (Home s.Home) (Color e.Color) (Nationality e.Nationality)
          (Cigarettes e.Cigarettes) (Animal e.Animal) (Drink e.Drink)
        ) =
          <Prout s.Home '  ' <RU <Format e.Color> <Format e.Nationality> <Format e.Cigarettes> <Format e.Animal> <Format e.Drink>>>
      }     
      e.Table
    >
    <Prout>
}

/*

<Format e.Object> == e.Format

e.Object ::= s.Color | s.Nationality | s.Cigarretes | s.Animal | s.Drink | '???'
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Danish | Englishman | German | Shwed
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Animal ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer
e.Format ::= 'Жёлтый         ' | 'Голубой        ' | 'Красный        ' | 'Зелёный        ' | 'Белый          ' |
  | 'Норвежец       ' | 'Датчанин       '  |  'Англичанин     ' | 'Немец          ' | 'Швед           '  |
  | 'Dunhill        ' | 'Rothmans       '  |  'Pall Mall      ' | 'Marlboro       ' | 'Winfield       '  |
  | 'Кошка          ' | 'Конь           '  |  'Птица          ' | 'Рыба           ' | 'Собака         '  |
  | 'Вода' | 'Чай'  |  'Молоко' | 'Кофе' | 'Пиво' | '???            '

*/
Format {
  Yellow =
    'Жёлтый         ';
  Blue =
    'Голубой        ';
  Red =
    'Красный        ';
  Green =
    'Зелёный        ';
  White =
    'Белый          ';     
  Norwegian =
    'Норвежец       '; 
  Danish =
    'Датчанин       ';  
  Englishman =
    'Англичанин     ';
  German =
    'Немец          '; 
  Shwed =
    'Швед           ';   
  Dunhill =
    'Dunhill        ';
  Rothmans =
    'Rothmans       ';
  PallMall =
    'Pall Mall      ';
  Marlboro =
    'Marlboro       '; 
  Winfield =
    'Winfield       ';  
  Cat =
    'Кошка          ';    
  Horse =
    'Конь           ';
  Bird =
    'Птица          '; 
  Fish =
    'Рыба           ';
  Dog =
    'Собака         ';
  Water =
    'Вода';  
  Tea =
    'Чай';
  Milk =
    'Молоко'; 
  Coffee =
    'Кофе';
  Beer =
    'Пиво';
  '???' =
    '???            '  
}

/*

<PrintRules e.Rules> ==

e.Rules ::= s.NUMBER*

*/
PrintRules {
  =
    ;
  s.Rule e.RestRules =  
    <PrintRule s.Rule>
    <PrintRules e.RestRules>
}

/*

<PrintRule s.Rule> ==

s.Rule ::= s.NUMBER

*/
PrintRule {
  s.Rule =
    <Prout <RU 'Подсказка '> s.Rule>
    <Prout <RU <RuleText s.Rule>> '\n'>
}

/*

<RuleText s.Rule> == e.RuleText

s.Rule ::= s.NUMBER
e.RuleText ::= 'Англичанин живет в красном доме.' | 'У шведа есть собака.' |
  | 'Датчанин пьет чай.' | 'Зеленый дом стоит слева от белого.' | 'Обитатель зеленого дома пьет кофе.' |
  | 'Человек, который курит Pall Mall, держит птицу.' | 'Обитатель среднего дома пьет молоко.' |
  | 'Норвежец живет в первом доме.' | 'Курильщик Marlboro живет возле того, у кого есть кошка.' |
  | 'Человек, у которого есть конь, живет возле того, кто курит Dunhill.' | 'Курильщик Winfield пьет пиво.' |
  | 'Норвежец живет возле голубого дома.' | 'Немец курит Rothmans.' | 
  | 'Курильщик Marlboro живет по соседству с человеком, который пьет воду.' | 
  | 'Условия:\n'
    '1. Есть 5 домов разных цветов.\n'
    '2. В каждом доме живет по одному человеку отличающегося от другого по национальности.\n'
    '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
    '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.'

*/
RuleText {
  1 =
    'Англичанин живет в красном доме.';
  2 =
    'У шведа есть собака.';
  3 =
    'Датчанин пьет чай.';
  4 =
    'Зеленый дом стоит слева от белого.';
  5 =
    'Обитатель зеленого дома пьет кофе.';
  6 =
    'Человек, который курит Pall Mall, держит птицу.';
  7 =
    'Обитатель среднего дома пьет молоко.';
  8 =
    'Обитатель желтого дома курит Dunhill.';
  9 =
    'Норвежец живет в первом доме.';
  10 =
    'Курильщик Marlboro живет возле того, у кого есть кошка.';
  11 =
    'Человек, у которого есть конь, живет возле того, кто курит Dunhill.';
  12 =
    'Курильщик Winfield пьет пиво.';
  13 =
    'Норвежец живет возле голубого дома.';
  14 =
    'Немец курит Rothmans.';
  15 =
    'Курильщик Marlboro живет по соседству с человеком, который пьет воду.';
  s._ = 
    'Условия:\n'
    '1. Есть 5 домов разных цветов.\n'
    '2. В каждом доме живет по одному человеку отличающегося от другого по национальности.\n'
    '3. Каждый обитатель пьет только один определенный напиток, курит определенную марку сигарет и держит животное.\n'
    '4. Никто из пяти людей не пьет одинакового напитка, не курит одинаковые сигареты и не держит одинаковых животных.' 
}

$ENTRY Go {
  = <Help>
    <Br Solves '='>
    <Br Steps '=' 0>
    <Br StepsBack '=' 0>
    <Solve
* 1 2 3 4 5 6 7 8 9 10 11 12 13 nonoptimum      
* 7 9 13 4 5 1 8 11 2 3 12 6 10 optimum       
      (0 (7 9 4 5 1 8 11 2 3 12 6 10) '='
      ((Home 1) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 2) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 3) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 4) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      ((Home 5) (Color '???') (Nationality '???') (Cigarettes '???') (Animal '???') (Drink '???'))
      )
    >
    <Dg Solves>:
    {
      =
        <Prout <RU 'Вопрос: Чья рыба? Ответ: Нет решения.'>>; 
      e.Solves = 
        <MapAccum
          {
            s.Solve 
            (e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table)) =
              <Inc s.Solve>
              <Prout <RU 'РЕШЕНИЕ '> s.Solve '\n'>
              <Prout <RU 'Вопрос: Чья рыба? Ответ: '> <RU <Answer e.Table>> <RU ' держит рыбу.\n'>>
              <PrintSolve e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table)>
              <Prout>
          }
          1
          e.Solves
        >: s._ = 
        <Prout <RU 'Количество шагов без возврата: '> <Dg Steps>>
        <Prout <RU 'Количество шагов с возвратом: '> <Dg StepsBack>>
    }
    
}